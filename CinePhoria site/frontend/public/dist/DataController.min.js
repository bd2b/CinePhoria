"use strict";var l=function(f,e,t,s){function i(r){return r instanceof t?r:new t(function(a){a(r)})}return new(t||(t=Promise))(function(r,a){function n(c){try{u(s.next(c))}catch(h){a(h)}}function d(c){try{u(s.throw(c))}catch(h){a(h)}}function u(c){c.done?r(c.value):i(c.value).then(n,d)}u((s=s.apply(f,e||[])).next())})};import{Seance as m,TarifQualite as v}from"./shared-models/Seance.js";import{Film as A}from"./shared-models/Film.js";import{ReservationState as p}from"./shared-models/Reservation.js";import{getCookie as w,setCookie as E,datePrecedentMercredi as N,sanitizeFilm as D,sanitizeSeance as U,sanitizeCinema as C,sanitizeTarifQualite as _}from"./Helpers.js";import{ajouterJours as F,formatDateLocalYYYYMMDD as o,isDifferenceGreaterThanHours as M,isUUID as J}from"./Helpers.js";import{Cinema as I}from"./shared-models/Cinema.js";import{getSeancesByIdApi as y,getVersionApi as L,filmsSelectAllApi as P}from"./NetworkController.js";import{baseUrl as g}from"./Global.js";let S;export const dataReady=new Promise(f=>{S=f});export class DataController{constructor(){this.version={idInt:0,MAJEURE:0,MINEURE:0,BUILD:0,dateMaj:new Date("01/01/1980")},this._reservationState=p.PendingChoiceSeance,this._allSeances=[],this._Cinemas=[],this._tarifQualite=[],this._filterGenre="all"}get seances(){return this.filterNameCinema==="all"?this._allSeances:this._allSeances.filter(e=>e.nameCinema===this._filterNameCinema)}get films(){const e=new Date;return e.setDate(e.getDate()+90),this.extractFilmsFromSeances(new Date,e)}get filmsSortiesRecentes(){const e=N(),t=this.films.filter(a=>{if(!a.dateSortieCinePhoria)return!1;const n=new Date(a.dateSortieCinePhoria);return o(n)===o(e)}),s=t.length>0?t:this.films,i=t.length>0?"Nouveaute de la semaine":"Notre catalogue";return{films:s.filter(a=>a.dateSortieCinePhoria).sort((a,n)=>new Date(n.dateSortieCinePhoria).getTime()-new Date(a.dateSortieCinePhoria).getTime()),message:i}}get genreSet(){const e=new Set;return dataController.films.forEach(t=>{t.genreArray&&t.genreArray.split(",").forEach(s=>e.add(s.trim()))}),e}get filmsGenre(){let e=this.films;return this._filterGenre!=="all"&&(e=this.films.filter(t=>t.genreArray?t.genreArray.split(",").map(i=>i.trim().toLowerCase()).includes(this._filterGenre.toLowerCase()):!1)),e}get cinemas(){return this._Cinemas}get reservationState(){return this._reservationState}set reservationState(e){console.log("Mise a jour statut reservation = "+e),this._reservationState=e}get allSeances(){return this._allSeances}get seancesFutures(){return this.seances.filter(e=>new Date(e.dateJour||"")>=new Date)}get allTarifQualite(){return this._tarifQualite}get filterNameCinema(){return this._filterNameCinema||"all"}set filterNameCinema(e){if(e.trim()==="")throw new Error("Le nom du cin\xE9ma ne peut pas \xEAtre vide.");e.trim()!=="all"?(this._selectedNameCinema=e.trim(),console.log("DataC: Cinema selected = ",e)):console.log("DataC: Cinema selected = ",this._selectedNameCinema),console.log("DataC: Cinema filter = ",e),this._filterNameCinema=e,this.sauverEtatGlobal()}get selectedNameCinema(){return this._selectedNameCinema||"Paris"}get filterGenre(){return this._filterGenre}set filterGenre(e){this._filterGenre=e}get selectedFilmUUID(){return this._selectedFilmUUID||void 0}set selectedFilmUUID(e){if(!J(e))throw new Error("L'id du film n'est pas conforme.");console.log("Set selectedFilmUUID"),this._selectedFilmUUID=e}get selectedFilm(){return this._selectedFilmUUID?this.filmUUID(this._selectedFilmUUID):(console.error("selectedFilm : Film non trouv\xE9, premier film pris"),this.films[0])}get selectedSeanceDate(){return this._selectedSeanceDate||void 0}set selectedSeanceDate(e){this._selectedSeanceDate=e}get selectedSeanceUUID(){return this._selectedSeanceUUID||void 0}set selectedSeanceUUID(e){this._selectedSeanceUUID=e}get selectedUtilisateurUUID(){return this._selectedUtilisateurUUID||void 0}set selectedUtilisateurUUID(e){this._selectedUtilisateurUUID=e}get selectedUtilisateurMail(){return this._selectedUtilisateurMail||void 0}set selectedUtilisateurMail(e){this._selectedUtilisateurMail=e}get selectedUtilisateurDisplayName(){return this._selectedUtilisateurDisplayName||void 0}set selectedUtilisateurDisplayName(e){this._selectedUtilisateurDisplayName=e}get selectedReservationUUID(){return this._selectedReservationUUID||void 0}set selectedReservationUUID(e){this._selectedReservationUUID=e,e===void 0&&(this._selectedReservationCinema=void 0)}get selectedListSeats(){return this._selectedListSeats||void 0}set selectedListSeats(e){this._selectedListSeats=e,e===void 0&&(this._selectedListSeats=void 0)}get selectedReservationCinema(){return this._selectedReservationCinema||void 0}chargerDepuisAPI(){return l(this,void 0,void 0,function*(){console.log("DataC: ChargerDepuisAPI");try{m.allFilms=(yield P()).filter(D);const t=yield(yield fetch(`${g}/api/seances/filter?cinemasList="all"`)).json();if(!Array.isArray(t))throw new Error("La r\xE9ponse de l\u2019API n\u2019est pas un tableau.");this._allSeances=t.filter(U).map(n=>new m(n)),console.log(`Pour l'ensembles des cinemas, chargement depuis l'API : ${this.seances.length} s\xE9ances, ${this.films.length} films`);const i=yield(yield fetch(`${g}/api/seances/tarif`)).json();if(!Array.isArray(i))throw new Error("La r\xE9ponse de l\u2019API n\u2019est pas un tableau.");this._tarifQualite=i.filter(_).map(n=>new v(n)),console.log(`Pour l'ensemble des tarifs : chargement depuis l'API : ${this._tarifQualite.length} tarifs`);const a=yield(yield fetch(`${g}/api/cinemas`)).json();if(!Array.isArray(a))throw new Error("La r\xE9ponse de l\u2019API n\u2019est pas un tableau.");this._Cinemas=a.filter(C).map(n=>new I(n)),console.log(`Pour l'ensemble des cinemas, chargement depuis l'API : ${this._Cinemas.length} cinemas`),E(DataController.nomCookieDateAccess,new Date().toISOString(),1)}catch(e){console.error("Erreur lors du chargement des donn\xE9es de s\xE9ances : ",e)}finally{}})}extractFilmsFromSeances(e=new Date,t=new Date){const s=new Set(this.seances.filter(i=>{const r=i.dateJour;if(!r)return!1;const a=new Date(r);return o(a)>=o(e)&&o(a)<=o(t)}).map(i=>i.filmId).filter(i=>!!i));return m.allFilms.filter(i=>i.id&&s.has(i.id))}premierJour(e){return new Date(this.seancesFilm(e)[0].dateJour||"")}seancesFilmJour(e,t=new Date){return this.seances.filter(s=>s.filmId===e&&o(new Date(s.dateJour||""))===o(t))}seancesFilmDureeJour(e,t=new Date,s){return this.seances.filter(i=>i.filmId===e&&o(new Date(i.dateJour||""))>=o(t)&&o(new Date(i.dateJour||""))<o(F(t,s)))}seancesJour(e=new Date){return this.seances.filter(t=>o(new Date(t.dateJour||""))===o(e))}seancesFilm(e){return this.seances.filter(t=>t.filmId===e).sort((t,s)=>new Date(t.dateJour||"").getTime()-new Date(s.dateJour||"").getTime())}filmsJour(e=new Date){return this.extractFilmsFromSeances(e,e)}filmUUID(e){const t=this.films.find(s=>s.id==e);return t||(console.error("filmUUID : Film non trouv\xE9, premier film pris"),this.films[0])}seanceSelected(){return this.seances.filter(e=>e.seanceId===this._selectedSeanceUUID)[0]}seanceById(e){return this._allSeances.filter(t=>t.seanceId===e)[0]}sauverEtatGlobal(){return l(this,void 0,void 0,function*(){var e;const t={version:this.version,reservationState:this._reservationState,filterNameCinema:this._filterNameCinema,selectedNameCinema:this._selectedNameCinema,selectedFilmUUID:this._selectedFilmUUID,selectedSeanceDate:((e=this._selectedSeanceDate)===null||e===void 0?void 0:e.toISOString())||null,selectedSeanceUUID:this._selectedSeanceUUID,selectedUtilisateurUUID:this._selectedUtilisateurUUID,selectedUtilisateurMail:this._selectedUtilisateurMail,selectedUtilisateurDisplayName:this._selectedUtilisateurDisplayName,selectedReservationUUID:this._selectedReservationUUID,selectedListSeats:this._selectedListSeats,selectedReservationCinema:this._selectedReservationCinema},s=JSON.stringify(t);console.log(`DataC: Taille du snapshotGlobal = ${s.length} caract\xE8res`),localStorage.setItem(DataController.KEY_GLOBAL,s)})}sauverTarifs(){return l(this,void 0,void 0,function*(){if(!this._tarifQualite)return;const e=this._tarifQualite,t=JSON.stringify(e);console.log(`DataC: Sauvegarde des tarifs => taille = ${t.length}`),localStorage.setItem(DataController.KEY_TARIFS,t)})}sauverCinemas(){return l(this,void 0,void 0,function*(){if(!this._Cinemas)return;const e=this._Cinemas,t=JSON.stringify(e);console.log(`DataC: Sauvegarde des Cinemas => taille = ${t.length}`),localStorage.setItem(DataController.KEY_CINEMAS,t)})}sauverFilms(){return l(this,void 0,void 0,function*(){if(!m.allFilms)return;const e=m.allFilms,t=JSON.stringify(e);console.log(`DataC: Sauvegarde des Films => taille = ${t.length}`),localStorage.setItem(DataController.KEY_FILMS,t)})}sauverSeancesParCinema(e){return l(this,void 0,void 0,function*(){if(!this._allSeances)return;const t=new Map;if(this._allSeances.forEach(s=>{var i,r;const a=((i=s.nameCinema)===null||i===void 0?void 0:i.trim())||"unknown";t.has(a)||t.set(a,[]),(r=t.get(a))===null||r===void 0||r.push(s)}),e){const s=t.get(e);if(s){const i=JSON.stringify(s),r=`${DataController.KEY_SEANCES}_${e}`;console.log(`DataC: Sauvegarde s\xE9ances pour '${e}' => taille ${i.length} chars`),localStorage.setItem(r,i)}else console.warn(`Aucune s\xE9ance trouv\xE9e pour le cin\xE9ma '${e}'.`)}else t.forEach((s,i)=>{const r=JSON.stringify(s),a=`${DataController.KEY_SEANCES}_${i}`;console.log(`DataC: Sauvegarde s\xE9ances pour '${i}' => taille ${r.length} chars`),localStorage.setItem(a,r)})})}sauverComplet(){return l(this,void 0,void 0,function*(){yield this.sauverEtatGlobal(),yield this.sauverTarifs(),yield this.sauverCinemas(),yield this.sauverFilms(),yield this.sauverSeancesParCinema()})}chargerEtatGlobal(){return l(this,void 0,void 0,function*(){const e=localStorage.getItem(DataController.KEY_GLOBAL);if(!e){console.warn("DataC: Aucune donn\xE9e globale trouv\xE9e");return}try{const t=JSON.parse(e);this.version=t.version||{majeure:0,mineure:0,build:0},this._reservationState=t.reservationState||p.PendingChoiceSeance,this._filterNameCinema=t.filterNameCinema||void 0,this._selectedNameCinema=t.selectedNameCinema||void 0,this._selectedFilmUUID=t.selectedFilmUUID||void 0,this._selectedSeanceUUID=t.selectedSeanceUUID||void 0,this._selectedUtilisateurUUID=t.selectedUtilisateurUUID||void 0,this._selectedUtilisateurMail=t.selectedUtilisateurMail||void 0,this._selectedUtilisateurDisplayName=t.selectedUtilisateurDisplayName||void 0,this._selectedReservationUUID=t.selectedReservationUUID||void 0,this._selectedListSeats=t.selectedListSeats||void 0,this._selectedReservationCinema=t.selectedReservationCinema||void 0,t.selectedSeanceDate&&(this._selectedSeanceDate=new Date(t.selectedSeanceDate))}catch(t){console.error("DataC: Erreur parsing \xE9tat global",t)}})}chargerTarifs(){return l(this,void 0,void 0,function*(){const e=localStorage.getItem(DataController.KEY_TARIFS);if(e)try{const t=JSON.parse(e);Array.isArray(t)&&(console.log("arr",t),this._tarifQualite=t.filter(_).map(s=>new v(s)))}catch(t){console.error("DataC: Erreur parsing tarifs",t)}})}chargerCinemas(){return l(this,void 0,void 0,function*(){const e=localStorage.getItem(DataController.KEY_CINEMAS);if(e)try{const t=JSON.parse(e);Array.isArray(t)&&(this._Cinemas=t.filter(C).map(s=>new I(s)))}catch(t){console.error("DataC: Erreur parsing cinemas",t)}})}chargerFilms(){return l(this,void 0,void 0,function*(){const e=localStorage.getItem(DataController.KEY_FILMS);if(e)try{const t=JSON.parse(e);Array.isArray(t)&&(m.allFilms=t.filter(D).map(s=>new A(s)))}catch(t){console.error("DataC: Erreur parsing films",t)}})}chargerSeancesPourCinema(e){return l(this,void 0,void 0,function*(){const t=`${DataController.KEY_SEANCES}_${e}`,s=localStorage.getItem(t);if(!s)return[];try{const i=JSON.parse(s);if(Array.isArray(i))return i.filter(U).map(r=>new m(r))}catch(i){console.error("DataC: Erreur parsing seances pour",e,i)}return[]})}chargerSeancesTousCinemas(){return l(this,void 0,void 0,function*(){var e;if(!this._Cinemas||this._Cinemas.length===0){console.warn("DataC: Aucun cin\xE9ma n\u2019est charg\xE9, impossible de charger les s\xE9ances tous cin\xE9mas.");return}this._allSeances=[];for(const t of this._Cinemas){const s=((e=t.nameCinema)===null||e===void 0?void 0:e.trim())||"unknown",i=yield this.chargerSeancesPourCinema(s);this._allSeances.push(...i)}console.log(`DataC: Toutes les s\xE9ances de ${this._Cinemas.length} cin\xE9mas charg\xE9es. Nombre total de s\xE9ances : ${this._allSeances.length}.`)})}chargerComplet(){return l(this,void 0,void 0,function*(){console.log("DataC: ChargerComplet multi storage"),yield this.chargerEtatGlobal(),yield this.chargerTarifs(),yield this.chargerCinemas(),yield this.chargerFilms(),yield this.chargerSeancesTousCinemas()})}init(){return l(this,void 0,void 0,function*(){console.log("DataC: Init"),yield this.chargerComplet();try{const s=yield L();console.log("Version du serveur = ",JSON.stringify(s)),console.log("Version du cache = ",JSON.stringify(this.version));const i=this.version.dateMaj&&s.dateMaj&&this.version.dateMaj<s.dateMaj,r=this.version.MAJEURE&&s.MAJEURE&&this.version.MAJEURE!==s.MAJEURE;if(i||r){console.log(`DataC: nouvelle version ${i?"serveur":"majeur"} - rechargement depuis l\u2019API`),yield this.chargerDepuisAPI(),S(),this.version=s,yield this.sauverComplet();return}else console.log("Pas de mise \xE0 jour de cache")}catch(s){console.error("Impossible de versifier la mise \xE0 jour su site = ",s)}let e=!0;const t=w(DataController.nomCookieDateAccess);t?M(new Date,new Date(t),DataController.validiteCache)?console.log("DataC: cookie validite expir\xE9"):(e=!1,console.log("DataC: cookie valide")):console.log("DataC: cookie validite absent"),!this._allSeances.length||e?(console.log("[init] Cache inexistant/vide ou expir\xE9 -> rechargement depuis l\u2019API"),yield this.chargerDepuisAPI(),yield this.sauverComplet()):console.log("[init] Donn\xE9es restaur\xE9es depuis localStorage"),S()})}getSeanceFromDB(e){return l(this,void 0,void 0,function*(){try{return yield y(e)}catch(t){console.error("Erreur dans la r\xE9cup\xE9ration de seances : "+t)}return[]})}updateSeances(e){return l(this,void 0,void 0,function*(){console.log("Update s\xE9ances UUID =",e);try{const t=yield y(e),s=new Map;t.forEach(i=>{var r;const a=this._allSeances.findIndex(d=>d.seanceId===i.seanceId);a!==-1?this._allSeances[a]=i:console.error("S\xE9ance non trouv\xE9e : ",i.seanceId);const n=i.nameCinema||"unknown";s.has(n)||s.set(n,[]),(r=s.get(n))===null||r===void 0||r.push(i)});for(const[i,r]of s.entries()){const a=`${DataController.KEY_SEANCES}_${i}`,n=localStorage.getItem(a);let d=[];n&&(d=JSON.parse(n)),r.forEach(u=>{const c=d.findIndex(h=>h.seanceId===u.seanceId);c!==-1?d[c]=u:d.push(u)}),localStorage.setItem(a,JSON.stringify(d)),console.log(`DataC: Cache mis \xE0 jour pour cin\xE9ma '${i}', ${r.length} s\xE9ances modifi\xE9es.`)}}catch(t){console.error("Erreur dans mise \xE0 jour des s\xE9ances : "+t)}})}}DataController.validiteCache=1,DataController.nomCookieDateAccess="dateAccess",DataController.nomStorage="storage",DataController.KEY_GLOBAL="myAppState",DataController.KEY_TARIFS="myAppTarifs",DataController.KEY_CINEMAS="myAppCinemas",DataController.KEY_FILMS="myAppFilms",DataController.KEY_SEANCES="myAppSeances";export let dataController=new DataController;
